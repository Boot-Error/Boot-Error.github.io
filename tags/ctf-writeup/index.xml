<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ctf-writeup on Vighnesh&#39;s Musings</title>
    <link>https://boot-error.github.io/tags/ctf-writeup/</link>
    <description>Recent content in ctf-writeup on Vighnesh&#39;s Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://boot-error.github.io/tags/ctf-writeup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cracker_barrel - AUCTF writeup</title>
      <link>https://boot-error.github.io/post/cracker_barrel_writeup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://boot-error.github.io/post/cracker_barrel_writeup/</guid>
      <description>In AUCTF 2020 under rev section, the challenge cracker barrel had a binary given running on remote.
Let&amp;rsquo;s rev it up.
recon o cracker_barrel aaa i fd 6 file cracker_barrel size 0x43e8 humansz 17.0K mode r-x format elf64 iorw false blksz 0x0 block 0x100 type DYN (Shared object file) arch x86 baddr 0x0 binsz 15399 bintype elf bits 64 canary true class ELF64 compiler GCC: (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008 crypto false endian little havecode true intrp /lib64/ld-linux-x86-64.</description>
    </item>
    
    <item>
      <title>plain_jane - AUCTF writeup</title>
      <link>https://boot-error.github.io/post/plain_jane_writeup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://boot-error.github.io/post/plain_jane_writeup/</guid>
      <description>In AUCTF 2020 under rev section, the challenge plain jane had a assembly code. It said, we need to figure out what the program returns.
Here&amp;rsquo;s what I did.
First, compile it to binary using gcc
Compile gcc -o plain_jane plain_jane.s Then open the binary in radare.
Recon o plain_jane aaa i fd 7 file plain_jane size 0x4040 humansz 16.1K mode r-x format elf64 iorw false blksz 0x0 block 0x100 type DYN (Shared object file) arch x86 baddr 0x0 binsz 14714 bintype elf bits 64 canary false class ELF64 compiler GCC: (Arch Linux 9.</description>
    </item>
    
    <item>
      <title>vault - TAMUctf writeup</title>
      <link>https://boot-error.github.io/post/vault-writeup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://boot-error.github.io/post/vault-writeup/</guid>
      <description>For me its been a long while since I challenged in a ctf competition. So I decided to play one because we in &amp;ldquo;Quarantine&amp;rdquo; anyway. This challenge is from TAMUctf 2020 under &amp;ldquo;Reversing&amp;rdquo; named as &amp;lsquo;vault&amp;rsquo;.
I swear anything that says vault as a introductory challenge is a good way to brush up your basic debugging skills, because its the printf(&amp;quot;hello, world&amp;quot;); of reverse engineering and binary analysis.
I&amp;rsquo;ll be using radare2 using jupyter-radare2 kernel.</description>
    </item>
    
  </channel>
</rss>